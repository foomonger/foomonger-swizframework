#summary Using the [SignalHandler] custom metadata tag (v1.5.0)
#labels Featured

!SignalHandlerProcessor is the Signal version of !EventHandlerProcessor (previously known as !MediateProcessor). It is used to automatically add listeners to your Signal Beans.

Example [http://www.foomonger.com/swizframework/SignalHandlerProcessorExample/SignalHandlerProcessorExample.swf SWF] and [http://www.foomonger.com/swizframework/SignalHandlerProcessorExample/srcview/ Source].

Usage:

 # If using the source directly, add `SignalHandler` to the list of metadata tags to keep when compiling. The `SignalHandler` tag is included in the SWC.
 # Add !SignalHandlerProcessor to the Swiz instance
 # Decorate methods with {{{[SignalHandler]}}} (with appropriate properties). The processor will add the method to a Signal Bean. 

{{{[SignalHandler]}}} Options:

You define which Signal Bean to use by:

Bean name. E.g. 
 {{{[SignalHandler(name="mySignalBeanName")]}}}
 
 "name" is the default property so the above is the same as:

 {{{[SignalHandler("mySignalBeanName")]}}}
Bean type. E.g.
 {{{[SignalHandler(type="com.foomonger.signals.UpdateBarSignal")]}}}

 This is useful when subclassing Signals.

 You can define {{{signalPackages}}} on the processor instance just like  {{{eventPackages}}} on !SwizConfig. E.g.
   Processor:
    {{{<processors:SignalHandlerProcessor signalPackages="com.foomonger.signals"/>}}}
   Metadata:
    {{{[SignalHandler(type="UpdateBarSignal")]}}} 
The processor always compares the listener's argument length with the Signal's valueClasses. It will throw an error if the lengths do not match. The processor will also strictly compare the argument types if you set {{{strictArgumentTypes =  true}}}. E.g.
 {{{<processors:SignalHandlerProcessor strictArgumentTypes="true"/>}}}
You may also use !DeluxeSignals and define the priority. E.g. 
 {{{[SignalHandler(bean="myDeluxeSignalBean", priority="2")]}}}